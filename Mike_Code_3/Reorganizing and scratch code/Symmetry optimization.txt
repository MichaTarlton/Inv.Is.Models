
% Symmetry optimization 

% Take BLLH.Jasym.(model)
% Find matrix coordinates of where Jasym == 1

[row,col] = find(Jasym == 1)

% if in upper or lower triangle?
make recovered symmetry matrix (see below) where row=col values are included. So empty matrix except for left out symmetries across the diagonal and their values

%  Take the Jrecon matrix, multiply the missing symmetry coordinate points by zero to clear them out, then add the symmetery recovered values. 



%for model: Bestmodel(row)
% that is find the best model for the row that the asymmetry is found in
% then for the column coordinate,turn that column into a vector and grab the last nonzero value in it. might also be able to do with out turning into a vector.
% dupicate for the symmetrical [row= col] values.

% may be able to simplify by figuring out if asymmetry is upper or lower traangle, though I can't think of how atm. 
% Maybe take the asy coordinates and check which permutation of them has a value == to zero





% For finding missing asymmetries
%	jasym2 = Jasym == 1
% 	jasym2 = jasym2 + jasym2'

jasym3 = (Jasym + Jasym') ~= 0
(jasym3 + Jcon) == 1
[row,col] = find(ans == 1)


jasym3 = ((Jasym + Jasym') ~= 0)
(((Jasym + Jasym') ~= 0) + Jcon) == 1
[row,col] = find((((Jasym + Jasym') ~= 0) + Jcon) == 1)


% Find the recon value
% in this case the last viable value 
% for coordno = 1:length(row)

MultiAllStruct(2).AllStruct.St1Bt1N20T1E3.BLLH(1).NodeModel(row(coordno)).w_ML(:) 
v = nonzeros(MultiAllStruct(2).AllStruct.St1Bt1N20T1E3.BLLH(1).NodeModel(row(coordno)).w_ML(:,col(coordno)))
reconval = v(end)

% create new symmetry recon matrix
%

Jsymrecon = zeros(size(Jrecon))

Jsymrecon(row(coordno),col(coordno)) = val 

% then outside the loop I've kinda drawn out
% gotta make sure this doesn't have ANY overlaps
% do the if == 2 check here

Jsymrecon = Jsymrecon + Jrecon

and Jsymcon is just the jasym3

ok I think that's good enough for noww